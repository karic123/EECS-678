<!DOCTYPE html>
<html lang="en">
<head>
<title>execv(3): execute file - Linux man page</title>
<base href="https://linux.die.net/man/3/execv">
<link rel="canonical" href="https://linux.die.net/man/3/execv">
<link rel="stylesheet" type="text/css" href="/style/white.css">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
<meta name="viewport" content="width=device-width,initial-scale=1">
<meta name="description" content="The execv(), execvp(), and execvpe() functions provide an array of pointers to null-terminated strings that represent the argument list available to the new program.">
<script type="text/javascript">
<!--
var _gaq = _gaq || [];_gaq.push(['_setAccount', 'UA-50820-6']);_gaq.push(['_trackPageview']);
window.google_analytics_uacct = 'UA-50820-6';
// -->
</script>
</head>

<body>
<div id=bg>
<div id=logo>
<a href="https://www.die.net/"><img
src="/style/logo.svg" alt="die.net" width=120 height=120
onerror="this.onerror=null; this.src='/style/logo.png'"></a>
</div>
<div id=content>

<!-- google_ad_section_start -->
<h1>execv(3) - Linux man page</h1>

<h2>Name</h2>

<p>execl, execlp, execle, execv, execvp, execvpe - execute a file
<h2>Synopsis</h2>
<div id=adright>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-5823754184406795"
     data-ad-slot="7130739364"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>


<p><b>#include &lt;<a href="/include/unistd.h" rel="nofollow">unistd.h</a>&gt;</b>
<p><b>extern char **environ;</b>
<p><b>int execl(const char *</b><i>path</i><b>, const char *</b><i>arg</i><b>, ...);<br>
int execlp(const char *</b><i>file</i><b>, const char *</b><i>arg</i><b>, ...);<br>
int execle(const char *</b><i>path</i><b>, const char *</b><i>arg</i><b>,<br>
..., char * const</b> <i>envp</i><b>[]);<br>
int execv(const char *</b><i>path</i><b>, char *const</b> <i>argv</i><b>[]);<br>
int execvp(const char *</b><i>file</i><b>, char *const</b> <i>argv</i><b>[]);<br>
int execvpe(const char *</b><i>file</i><b>, char *const</b> <i>argv</i><b>[],<br>
char *const</b> <i>envp</i><b>[]);</b>

<p>Feature Test Macro Requirements for glibc (see <b><a href="/man/7/feature_test_macros">feature_test_macros</a></b>(7)):
<dl compact>
<dt><b>execvpe</b>(): _GNU_SOURCE
</dl>
<h2>Description</h2>

<p>The <b>exec</b>() family of functions replaces the current process image with a new process image. The functions described in this manual page are
front-ends for <b><a href="/man/2/execve">execve</a></b>(2). (See the manual page for <b><a href="/man/2/execve" rel="nofollow">execve</a></b>(2) for further details about the replacement of the current process image.)

<p>The initial argument for these functions is the name of a file that is to be executed.
<p>The <i>const char *arg</i> and subsequent ellipses in the <b>execl</b>(), <b>execlp</b>(), and <b>execle</b>() functions can be thought of as <i>arg0</i>,
<i>arg1</i>, ..., <i>argn</i>. Together they describe a list of one or more pointers to null-terminated strings that represent the argument list available to
the executed program. The first argument, by convention, should point to the filename associated with the file being executed. The list of arguments
<i>must</i> be terminated by a NULL pointer, and, since these are variadic functions, this pointer must be cast <i>(char *) NULL</i>.
<p>The <b>execv</b>(), <b>execvp</b>(), and <b>execvpe</b>() functions provide an array of pointers to null-terminated strings that represent the argument list
available to the new program. The first argument, by convention, should point to the filename associated with the file being executed. The array of pointers
<i>must</i> be terminated by a NULL pointer.
<p>The <b>execle</b>() and <b>execvpe</b>() functions allow the caller to specify the environment of the executed program via the argument <i>envp</i>. The
<i>envp</i> argument is an array of pointers to null-terminated strings and <i>must</i> be terminated by a NULL pointer. The other functions take the
environment for the new process image from the external variable <i>environ</i> in the calling process.

<p><b>Special semantics for execlp() and execvp()</b>
<dl compact>
<dt>The <b>execlp</b>(), <b>execvp</b>(), and <b>execvpe</b>() functions duplicate the actions of the shell in searching for an executable file if the specified
filename does not contain a slash (/) character. The file is sought in the colon-separated list of directory pathnames specified in the <b>PATH</b> environment
variable. If this variable isn't defined, the path list defaults to the current directory followed by the list of directories returned by
<i>confstr(_CS_PATH)</i>. (This <b><a href="confstr">confstr</a></b>(3) call typically returns the value "/bin:/usr/bin".)
<p>If the specified filename includes a slash character, then <b>PATH</b> is ignored, and the file at the specified pathname is executed.
<p>In addition, certain errors are treated specially.
<p>If permission is denied for a file (the attempted <b><a href="/man/2/execve" rel="nofollow">execve</a></b>(2) failed with the error <b>EACCES</b>), these functions will continue searching the rest of
the search path. If no other file is found, however, they will return with <i>errno</i> set to <b>EACCES</b>.
<p>If the header of a file isn't recognized (the attempted <b><a href="/man/2/execve" rel="nofollow">execve</a></b>(2) failed with the error <b>ENOEXEC</b>), these functions will execute the shell
(<i>/bin/sh</i>) with the path of the file as its first argument. (If this attempt fails, no further searching is done.)
</dl>
<h2>Return Value</h2>

<p>The <b>exec</b>() functions only return if an error has occurred. The return value is -1, and <i>errno</i> is set to indicate the error.
<h2>Errors</h2>

<p>All of these functions may fail and set <i>errno</i> for any of the errors specified for <b><a href="/man/2/execve" rel="nofollow">execve</a></b>(2).
<h2>Versions</h2>

<p>The <b>execvpe</b>() function first appeared in glibc 2.11.
<h2>Conforming To</h2>

<p>POSIX.1-2001, POSIX.1-2008.
<p>The <b>execvpe</b>() function is a GNU extension.
<h2>Notes</h2>

<p>On some other systems, the default path (used when the environment does not contain the variable <b>PATH</b>) has the current working directory listed after
<i>/bin</i> and <i>/usr/bin</i>, as an anti-Trojan-horse measure. Linux uses here the traditional "current directory first" default path.
<p>The behavior of <b>execlp</b>() and <b>execvp</b>() when errors occur while attempting to execute the file is historic practice, but has not traditionally
been documented and is not specified by the POSIX standard. BSD (and possibly other systems) do an automatic sleep and retry if <b>ETXTBSY</b> is encountered.
Linux treats it as a hard error and returns immediately.
<p>Traditionally, the functions <b>execlp</b>() and <b>execvp</b>() ignored all errors except for the ones described above and <b>ENOMEM</b> and <b>E2BIG</b>,
upon which they returned. They now return if any error other than the ones described above occurs.
<h2>See Also</h2>

<p><b><a href="/man/1/sh">sh</a></b>(1), <b><a href="/man/2/execve" rel="nofollow">execve</a></b>(2), <b><a href="/man/2/fork">fork</a></b>(2), <b><a href="/man/2/ptrace">ptrace</a></b>(2), <b><a href="fexecve">fexecve</a></b>(3), <b><a href="/man/7/environ">environ</a></b>(7)

<!-- google_ad_section_end -->
<h2>Referenced By</h2>
<b><a href="/man/1/rssh" rel="nofollow">rssh</a></b>(1)
<div id=adbottom>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-5823754184406795"
     data-ad-slot="8789940313"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

</div>
<div id=menu>
<dl>
<dt>Site Search</dt>
<dd>
<form id="cse-search-box-menu" action="https://www.google.com/cse">
<input name="q" type="text" size="10">
<input type="hidden" name="sa" value="Search">
<input type="hidden" name="ie" value="ISO-8859-1">
<input type="hidden" name="cx" value="partner-pub-5823754184406795:54htp1rtx5u">
<input type="hidden" name="cof" value="FORID:9">
</form>
<script type="text/javascript">
<!--
document.forms["cse-search-box-menu"].action = "https://www.die.net/search/";
// -->
</script>
</dd></dl>



<dl>
<dt>Library</dt>
<dd><a href="https://linux.die.net/">linux docs</a></dd>
<dd><a href="https://linux.die.net/man/">linux man pages</a></dd>
<dd><a href="https://www.die.net/musings/page_load_time/">page load time</a></dd>
</dl>
<dl>
<dt>Toys</dt>
<dd><a href="https://www.die.net/earth/">world sunlight</a></dd>
<dd><a href="https://www.die.net/moon/">moon phase</a></dd>
<dd><a href="http://trace.die.net/">trace explorer</a></dd>
</dl>


<dl>
<dt><a href="/man/3/"><img src="/style/back.gif" alt="Back"
width=20 height=22></a></dt><dd></dd>
</dl>
</div></div>
<script type="text/javascript">
<!--
if (top.location != self.location) top.location = self.location;
if (/[?&][pq]=/.test(document.referrer)) document.write(unescape("%3Cscript src='/style/highlight.js' type='text/javascript'%3E%3C/script%3E"));
function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: 'en', floatPosition: google.translate.TranslateElement.FloatPosition.TOP_RIGHT, gaTrack: true, gaId: 'UA-50820-6'});}
if (!/^en/i.test(window.navigator.userLanguage||window.navigator.language)) document.write(unescape("%3Cscript src='//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit' type='text/javascript'%3E%3C/script%3E"));
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
// -->
</script>
</body>
</html>
