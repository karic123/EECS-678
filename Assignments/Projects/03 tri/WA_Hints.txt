buddy_alloc (size):
1. Ascertain the free-block order which can satisfy the requested size. The block order for size x is ceil ( log2 (x))

Example: 60k -> block-order = ceil ( log2 (60k)) = ceil ( log2 (k x 2^5 x 2^10)) = order-16

2. Iterate over the free-lists; starting from the order calculated in the above step. If the free-list at the required order is not-empty, just remove the first page from that list and return it to caller to satisfy the request

3. If the free-list at the required order is empty, find the first non-empty free-list with order > required-order. Lets say that such a list exists at order-k

4. Remove a page from the order-k list and repeatedly break the page and populate the respective free-lists until the page of required-order is obtained. Return that page to caller (It would be good to encase this functionality in a separate function e.g. split)

5. If a non-empty free-list is not found, this is an error

buddy_free:
1. Calculate the address of the buddy

2. If the buddy is free, merge the two blocks i.e. remove the buddy from its free-list, update the order of the page-at-hand and add the page to the relevant free-list

3. Do step-2 repeatedly until no merging is possible
	a. The buddy is not free
	b. The max order is reached

split (order):
1. Get the page structure from the free-list node (Hint: Recall the method to get the payload pointer from the list pointer which can come in handy here. Remember that the free-list[order] node is embedded inside the page-structure as list. You may want to use the page_from_head macro here)

2. Get the index of the page structure obtained above (Hint: index_from_page)

3. Now you want to split this page-block of given order into two equally sized blocks of order - 1. Note that the address of the first of these child blocks will be the same as the parent block. You only need to calculate the address of the buddy

4. Calculate the address of the buddy from the address of the page you have. Hint: Lets say that the page you have; has index i. 
	a. Calculate the absolute address of the page using its index and order (page_to_addr might be useful here
	b. Calculate the address of the buddy using the address calculated above (buddy_addr is useful here)
	c. Convert the address of buddy into page-index (addr_to_page)

5. Populate the fields of both pages appropriately (depending upon what you are keeping in your page-structure. I would suggest that you keep at-least the order of the page in the page-structure)

6. Add both pages to the free-lists at order - 1 (Note: The buddy page can simply be added to the list. The original page will have to be removed from its current list and moved to the list at order - 1. list_move macro may come in handy for this)

<strong>merge</strong> method is quite similar to split. If you can correctly implement split, you should not have any problem implementing merge.
